//**************************************************************************************
//  Lighting Pixel Shader
//**************************************************************************************

//GLOBALS
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColour;
	float4 diffuseColour;
	float3 lightDirection;
	float specularPower;
	float4 specularColour;
	//float padding;
};

//TYPEDEF
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

//PIXEL SHADER
float4 LightingPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColour;
	float3 lightDir;
	float lightIntensity;
	float4 colour;
	float3 reflection;
	float4 specular;
	
	//Sample the pixel colour from the texture using the sampler at this texture coordinate location
	textureColour = shaderTexture.Sample(SampleType, input.tex);
	
	//Set the default output colour to the ambient light value for all pixels
	colour = ambientColour;
	
	//Initialize the specular colour
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	//Invert the light direction for calculation
	lightDir = -lightDirection;
	
	//Calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
	{
		//Determine the final diffuse colour based on the diffuse colour and the amount of light intensity
		colour += (diffuseColour * lightIntensity);
		
		//Saturate the ambient and diffuse colour
		colour = saturate(colour);
		
		//Calculate the reflection vector based on the light intensity, normal vector, and light direction
		reflection = normalize(2 * lightIntensity * input.normal - lightDir);
		
		//Determine the amount of specular light based on the refection vector, viewing direction, and specular power
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}
	
	//Multiply the texture pixel and the final diffuse colour to get the final pixel colour result
	colour = colour * textureColour;
	
	//Add the specular component last to the output colour
	colour = saturate(colour + specular);
	
	return colour;
}